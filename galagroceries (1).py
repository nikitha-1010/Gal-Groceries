# -*- coding: utf-8 -*-
"""GalaGroceries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZO3XDPPx38B2oKmBJg-7CJIv6DqwfzC
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

p1='/content/drive/MyDrive/sample_sales_data.csv'
p2='/content/drive/MyDrive/sensor_stock_levels.csv'
p3='/content/drive/MyDrive/sensor_storage_temperature (1).csv'
df1=pd.read_csv(p1)
df2=pd.read_csv(p2)
df3=pd.read_csv(p3)

df1.drop('Unnamed: 0',axis=1,inplace=True)
df1.head()

df1.shape
df1['product_id'].value_counts()

df2.drop('Unnamed: 0',axis=1,inplace=True)
df2.head()

df2.drop(['id','timestamp'],axis=1,inplace=True)

df2.head()

dfk=pd.merge(df1,df2)
dfk.head()

dfk.isnull().sum()

df3.drop('Unnamed: 0',axis=1,inplace=True)
df3.head()

df3['temperature'].value_counts()

dfm=pd.merge(dfk,df3)

dfm.head()

dfm.isnull().sum()

dfm.drop(['transaction_id','timestamp','id'],axis=1,inplace=True)

dfm

dfm.isnull().sum()

dfm.rename(columns={'estimated_stock_pct':'stock'},inplace=True)

dfm.head()

x=dfm.copy()

x.drop(['product_id','stock'],inplace=True,axis=1)

y=pd.DataFrame(dfm['stock'])

x.head()

y.head()

x_encoded=pd.get_dummies(x,columns=['category','customer_type','payment_type'])

x_encoded.head()

x_encoded.columns

from sklearn.model_selection import train_test_split

#splitting the data into train and test data
x_train,x_test,y_train,y_test=train_test_split(x_encoded,y,test_size=0.2,random_state=2)

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

#x_train_norm=sc.fit_transform(x_train)
#x_test_norm=sc.fit_transform(x_test)

from sklearn.ensemble import RandomForestRegressor

#training the data using random forest algorithm
rf_model=RandomForestRegressor(n_estimators=100,random_state=42)
rf_model.fit(x_train,y_train)

y_pred=rf_model.predict(x_test)

from sklearn.metrics import mean_absolute_error,mean_squared_error

mae=mean_absolute_error(y_test,y_pred)
print(mae)

mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(mse,rmse)

import matplotlib.pyplot as plt
true_stock_levels = y_test  # Replace with your actual test set's stock levels

    # Plot a histogram comparing true and predicted stock levels
plt.hist(true_stock_levels, bins=10, alpha=0.5, label='True Stock Levels', color='blue')
plt.hist(y_pred, bins=10, alpha=0.5, label='Predicted Stock Levels', color='green')  # Adjust the number of bins as needed
plt.xlabel("Stock Level")
plt.ylabel("Frequency")
plt.title("Histogram of True vs. Predicted Stock Levels")
plt.legend(loc='upper right')
plt.show()

def get_user_input():
    product_id = input("Enter the product_id: ")
    category = input("Enter the category: ")
    customer_type = input("Enter the customer_type: ")
    unit_price = float(input("Enter the unit_price: "))
    quantity = int(input("Enter the quantity: "))
    total = float(input("Enter the total: "))
    payment_type = input("Enter the payment_type: ")
    temperature = float(input("Enter the temperature: "))

    user_data = {
        'unit_price': [unit_price],
        'quantity': [quantity],
        'total': [total],
        'temperature': [temperature],
        'category_baby products': [0],
        'category_baked goods': [0],
        'category_baking': [0],
        'category_beverages': [0],
        'category_canned foods': [0],
        'category_baby products': [0], 'category_baked goods': [0], 'category_baking': [0],
       'category_beverages': [0], 'category_canned foods': [0], 'category_cheese': [0],
       'category_cleaning products': [0], 'category_condiments and sauces': [0],
       'category_dairy': [0], 'category_frozen': [0], 'category_fruit': [0],
       'category_kitchen': [0], 'category_meat': [0], 'category_medicine': [0],
       'category_packaged foods': [0], 'category_personal care': [0], 'category_pets': [0],
       'category_refrigerated items': [0], 'category_seafood': [0], 'category_snacks': [0],
       'category_spices and herbs': [0], 'category_vegetables': [0],
       'customer_type_basic': [0], 'customer_type_gold': [0], 'customer_type_non-member': [0],
       'customer_type_premium': [0], 'customer_type_standard': [0], 'payment_type_cash': [0],
       'payment_type_credit card': [0], 'payment_type_debit card': [0],
       'payment_type_e-wallet': [0]
    }
    user_data[f'category_{category}'] = [1]
    user_data[f'payment_type_{payment_type}'] = [1]
    user_data[f'customer_type_{customer_type}'] = [1]

    return pd.DataFrame(user_data)

def main():
    # Get user input
    user_input = get_user_input()

    # Convert categorical columns to numeric using one-hot encoding
    #user_input_encoded = pd.get_dummies(user_input, columns=['category', 'customer_type', 'payment_type'])

    # Make prediction using the trained model
    predicted_stock_level = rf_model.predict(user_input)[0]

    print(f"Predicted stock level: {predicted_stock_level}")

if __name__ == "__main__":
    main()

